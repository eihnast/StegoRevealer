using System.Diagnostics;
using System.Numerics;
using Accord.Math;
using MathNet.Numerics.LinearAlgebra;
using Newtonsoft.Json;
using StegoRevealer.StegoCore.ImageHandlerLib;

namespace StegoRevealer.StegoCore.AnalysisMethods.HcfCom;

/// <summary>
/// Стегоанализатор метода Коха-Жао
/// </summary>
public class FanAnalyser
{
    private const string MethodName = "FAN (Fast Additive Noise)";

    /// <summary>
    /// Параметры метода
    /// </summary>
    public FanParameters Params { get; set; }

    /// <summary>
    /// Внутренний метод-прослойка для записи в лог
    /// </summary>
    private Action<string> _writeToLog = (string str) => new string(str);

    // Пары каналов: RG, GB, BR
    private static readonly (Func<ScPixel, byte>, Func<ScPixel, byte>)[] ChannelPairs = new[]
    {
        (new Func<ScPixel, byte>(c => c.Red), new Func<ScPixel, byte>(c => c.Green)),
        (new Func<ScPixel, byte>(c => c.Green), new Func<ScPixel, byte>(c => c.Blue)),
        (new Func<ScPixel, byte>(c => c.Blue), new Func<ScPixel, byte>(c => c.Red))
    };

    // Размер гистограммы (по одному каналу от 0 до 255)
    private const int BinSize = 256;

    private const string TrainingSet = "[[60.353195349445095,60.4194976578618,56.59692956539594,55.630116094327896,58.142839259775464,58.905512404534],[51.768569628010624,57.09342947077513,53.2848063776082,49.105415224665656,48.38038392454394,51.10172601304961],[62.21567092521785,63.78967904326951,61.89216168223769,62.04910127198104,60.967169605917555,62.02367102803473],[48.3987961011709,64.57470925549917,68.0233738049596,69.51562547408827,60.30514041769841,46.9765385284821],[42.07524542808776,51.49913671617883,54.62288587087982,48.85015569662808,51.99128946468304,45.346681209641915],[56.08187639072484,57.69115960522675,55.79227186694318,54.14946239977197,57.59874623748183,57.24672501632461],[60.61062062369587,55.59796828772441,55.00942011855537,57.99292994432771,61.784183828151335,62.61359759902278],[40.67595202694264,50.044498128909595,57.54736735891445,56.89509082884552,54.15370331825237,47.51858947552232],[29.077449130309216,61.41013667475157,56.937975990714264,56.84030622789039,61.473750933264306,27.80091283387156],[47.70303869149477,48.3219573285165,46.006446842704776,46.07185933114298,43.33590794931739,42.51682530626962],[59.31633215686093,58.319369294210404,49.32493078938474,47.22424568288581,54.95379617201503,56.932128548036395],[62.87205713951662,62.824766730216574,62.752354192913906,62.559886546115514,62.4622363844194,62.635567043208525],[63.38692898436872,61.95912293602116,59.85464334116131,58.10297026766417,54.95075076001551,57.29243668352959],[55.69455168561832,54.574886136715264,50.24010287017795,54.490129430147896,56.25449670804399,56.74917028156988],[56.61100141777166,56.4518109073023,55.650920914287155,55.14112929813681,54.60391120784729,55.54276981546719],[47.93782708599225,47.54470254467443,46.231177195210385,48.395709640334516,50.3062945674676,49.438317501834845],[61.5112239066539,61.40455413713364,61.92286091037865,60.14237268149005,61.42281249925287,62.4173672885902],[63.80715070542453,59.095855806079875,63.8755104593693,63.56506214251022,62.86098842321245,63.398986557191286],[43.6257867542167,45.92388791798032,44.066877678873,44.05011607067537,48.79657259673761,46.10327812255624],[50.890621708990594,51.28051213028147,50.58464427948006,49.92654986061989,49.915382524731285,52.007008800209704],[62.122814025950404,62.06930315377098,61.730547965190695,62.39257372187857,62.26429243755089,62.22068120173251],[77.04734717051282,72.69489287362092,59.62895706803214,35.92971480623316,38.858951676427566,63.25720891510647],[54.2306394292883,51.618272457500574,57.092444074820875,58.42922232851234,52.547407898203616,55.097626501684985],[62.37811764178459,61.60112117064082,58.64700858828038,53.43216681890841,56.04260043965824,59.58755512805583],[43.82050484307086,44.73715753239523,45.911459036256666,44.751898826972806,42.80896440887658,42.25360421135846],[57.79941358280076,58.04390613407855,56.00753872605894,55.667601850964274,57.302642572793104,56.51095391029211],[62.17331593654902,61.15967720068899,54.07533831064702,60.438725253948135,65.94890015634289,62.522212078212476],[35.70561142983779,50.70566110872524,48.01436386117982,48.24869229254159,53.648123134508495,40.29005076863803],[62.337944346251966,62.11046235188782,62.54453702870678,61.66301275866243,61.82801886911501,62.721799894337046],[62.366712586329115,62.57101053982713,62.06916921480065,60.06257940522827,59.93766508590365,61.6559296345141],[55.981436549038925,59.08680397841862,53.87900992994505,47.80086798527432,49.20439093664106,51.11203876943873],[58.02909546218322,57.8827687368283,58.78367500177202,54.92812368507433,56.35983930968549,59.244803604970826],[56.301310054942654,61.43476791746345,58.664592281695285,41.268957416749444,52.31373225357704,62.12051999912704],[52.44077731765106,51.870879652203065,60.0850249847207,60.49478691674278,55.656692525236934,55.5036732883728],[52.18401664596134,54.27572658545274,54.74519628105785,51.80730704148438,54.71823261893813,56.011505310586806],[44.53817747052576,43.87279538954622,45.50054734857048,41.694644203714276,42.25698263988894,44.530029004615514],[56.5583746401194,55.86330177919838,55.964509753159625,50.8106850194635,51.93844886426277,55.386654482534944],[59.96744686627827,59.05076528204008,57.021816829338306,56.21323835923929,56.89999486389744,58.93642888561515],[61.10515290810466,60.656348206443816,61.52337124370211,61.215868192797025,61.099440198748546,61.73704958780864],[62.92150463248524,61.019546084511695,60.764718503310135,62.10656407178554,60.52882801195516,61.06985538303904],[44.084007121042156,56.19579278152481,54.87246508396683,52.46588042415649,55.87723164654563,51.576054779765336],[62.50656388502729,62.11275220263682,63.214273347688405,63.0059439395933,62.91635408796966,63.28598021723778],[61.866257637726235,61.86625763772577,61.866257637726235,61.86625763772577,61.866257637726235,61.86625763772577],[53.50861539558843,52.706735306944566,45.19254818520121,34.996857329017296,42.17413825547448,50.35480797110266],[62.54965574659574,64.60267055207376,62.712017568542855,63.531083505374255,63.52640843007311,63.3644047446337],[46.69444650339768,47.638935680040206,50.468483166907355,42.66218845035698,49.00873429621366,48.99540998419817],[56.673962078671174,56.91424398239109,55.46748237359429,52.46611528171933,55.31164917513151,56.423877761344635],[61.787011350278,55.0732860739103,60.600613529035705,48.07046880316532,45.188963916365395,64.80646516935376],[51.299485692220486,53.99136224842076,56.7686388456367,51.597187565822104,53.45888120676457,53.79160074682457],[51.57324169519448,58.58129468067201,60.746245311655116,59.86384577568638,59.001464166224515,55.52922461575819],[47.152348521022965,48.93975795694044,57.19415294326304,56.95989396006452,53.89821782307437,53.42518030352578],[53.22776642912564,47.18950922038383,47.14203497783325,51.411519125518744,51.23038403486289,51.01768087422993],[54.2440844258026,52.05562248511589,51.923001678342956,50.35103705467783,49.16810228547166,52.038759888424835],[49.22780655560984,53.420856607893874,58.450525858556844,46.58295534641282,52.15301289184866,59.2574358071679],[52.95032923354812,51.178097721346624,57.28948970271351,50.971342807071515,49.06398460007107,56.9248207582683],[58.71866588036566,60.33856765482948,60.23643747656888,60.418782408433565,62.35559166324217,62.155577712227846],[52.956567702403575,61.05928550528255,62.72377323320875,48.44092885436278,51.94329531205817,61.34842723968475],[56.52118847633789,56.06594245844309,50.23758725498271,49.35201111363323,50.99762242113395,51.74147524324824],[44.78112256885941,60.676330592890224,63.44629317073397,59.60361258776993,55.63160682485313,49.939837121662364],[47.48133011809918,47.2635971743779,44.73710837435405,42.262019481363225,46.590069689804984,48.32659163948315],[63.60454645312049,64.19377608092758,63.42840541027361,62.31619430745618,63.35007743433175,62.59423790076993],[60.70317292306207,57.71477596543212,64.61782875010455,52.927044156604026,49.51352068221843,63.19823695234764],[54.43246310473759,56.06995595529085,53.672159711772395,52.24840366295798,52.530173954975815,55.84349762083647],[61.90337598266873,61.53174311246568,62.54288454463479,62.09656043869866,62.14233498646944,62.6774310222702],[54.61764175755436,59.866613526341055,62.67907638974171,32.48855609889495,41.600091705137714,63.00092044858999],[54.40029695835406,56.39787847343865,56.15735977115399,38.090759746696946,46.25390063676566,55.738266574768716],[56.58333235469288,57.310183428277014,49.50082935706421,47.77178036507299,48.78306728408092,48.87114473701692],[52.92914480442402,53.616538112725934,52.435331897074626,49.52733579238863,52.188286267035664,53.85121090788053],[53.63359947002241,57.73543674809273,43.863389478563235,52.89954633756705,56.64060662406676,43.19134372109455],[41.925086975251105,50.81726089075467,45.882443593765636,43.323430769157504,48.18803148594601,46.13697583179351],[50.441894191687325,53.78579656360775,55.29707073502776,53.804698210795166,58.513675599972856,57.97159153392827],[60.97205547136292,57.6902242661766,53.32260421750061,45.26450762665673,52.53056547241823,60.75881568288294],[46.68301965129689,43.854598856545685,49.58940537249876,48.59886390027746,49.88141894853946,52.27303549714445],[47.052398073403296,45.0973451009485,51.05283727386272,46.76586931287798,46.50657324539018,50.1895231730316],[57.484562612685785,57.082641566738836,56.92540488122273,54.91202172830426,56.744500722747105,57.00708256229703],[41.001143722557494,45.314376249365786,51.87001987598708,53.12251409844278,51.11079732667369,51.49411805900745],[59.33049265019075,61.8695744316223,59.02016954523314,62.323555453843184,62.77086620148912,57.06785130627975],[55.68361214842902,56.64241850668747,54.759832665058305,52.102021693834885,52.48437412971923,56.07505782899839],[61.99238761805782,60.95614610401784,54.337445236899164,49.04291865119632,52.5757689653792,58.80056353643941],[60.020604355031026,57.616423315458434,62.84962602655139,52.83081359855195,48.7127718092501,61.74559803705352],[53.97255556494067,61.24170437504956,62.68203903487355,49.58351256907719,57.05891216014847,62.815798399733],[60.36301378311952,59.55705233797892,58.56713898079031,48.787742895961635,52.25437350561544,58.98993838681526],[50.63936471110228,53.16578081195208,51.17073534296261,46.20491721527902,48.70100899384633,50.92756784982158],[51.44578770463631,51.54002055336737,55.908537296569754,55.259730550751044,56.55371706800087,56.22600419772181],[62.229510252891124,60.01292034939741,56.070527796002324,61.330820608558994,61.55328436474566,61.43883152922049],[54.83626642230517,60.68213450862018,60.475391312934306,57.32992516338823,61.775172139096696,60.04478932928623],[57.3022836448638,56.918963610803175,60.278726046027344,60.235499624791316,59.40602701319835,59.23166057196279],[61.313113676377036,61.52601094927315,63.48858663135109,62.490987235343795,62.619009524506275,62.87243859045268],[59.36142614794697,60.720056565488754,59.90745609872969,58.801763931710646,60.73384137573702,61.41829989600697],[57.675704060284474,56.81514516765425,60.199026755774156,53.961985487587995,52.32653078031992,57.624464406440936],[35.39197920535163,58.453754944025725,51.070359833792374,45.44593084018199,55.396243557792424,34.35745670588904],[59.82597389095329,59.57875252532349,56.186991091209784,55.7241296889348,59.44804526758611,60.25178265000933],[57.17617735367565,60.525681017685855,57.76594839397973,57.85933384931634,56.48148988951182,55.750868622398634],[60.121863130088585,61.62096891906198,59.699670895216066,48.66154145571692,49.993657923634,59.670604002789936],[54.46744833945951,54.56126647420502,40.75578800526415,39.63223415587817,33.61683301410534,34.88502158643029],[61.09576377269205,61.100996234560725,60.56871470297374,61.17279075257374,62.80902999751946,61.212821125852386],[51.02807856131937,51.924970032886435,52.36979495452637,52.66270695549425,53.990655108146996,53.490651691446345],[54.901427743271135,54.36972107309132,54.33487382854334,55.43458698499148,55.97080946050743,56.01856818139055],[60.338508921026005,60.30587299316069,62.284019485585915,57.0112726632979,58.07713851546569,61.97750726672994],[62.04035524150203,54.91286351250132,41.868583317969836,47.12657767291616,49.30307243871981,55.28690028723329]]";


    public FanAnalyser(ImageHandler image)
    {
        Params = new FanParameters(image);
    }

    public FanAnalyser(FanParameters parameters)
    {
        Params = parameters;
    }


    /// <summary>
    /// Запуск стегоанализа
    /// </summary>
    /// <param name="verboseLog">Вести подробный лог</param>
    public FanResult Analyse(bool verboseLog = false)
    {
        var timer = Stopwatch.StartNew();

        var result = new FanResult();
        _writeToLog = result.Log;
        _writeToLog($"Started steganalysis by method '{MethodName}' for image '{Params.Image.ImgName}'");

        var comList = ComputeCompositeCom(Params.Image);

        result.ComsList = comList;
        var trainingComs = JsonConvert.DeserializeObject<double[][]>(TrainingSet);

        if (trainingComs is not null)
        {
            double distance = ComputeMahalanobisDistance(comList, trainingComs);
            result.IsHidingDetected = distance > Params.Threshold;
        }
        //result.IsHidingDetected = IsSuspiciousHeuristically(comList, trainingComs);

        timer.Stop();
        _writeToLog($"Steganalysis by method '{MethodName}' ended for {timer.ElapsedMilliseconds} ms");

        result.ElapsedTime = timer.ElapsedMilliseconds;
        return result;
    }

    public static double[] ComputeCompositeCom(ImageHandler image)
    {
        var comList = new double[6];  // 3 пары × 2 координаты центра масс (x, y)
        int pairCount = ChannelPairs.Length;

        Parallel.For(0, pairCount, i =>
        {
            var (c1Func, c2Func) = ChannelPairs[i];

            // Построение двумерной гистограммы
            var hist = new double[BinSize, BinSize];

            for (int y = 0; y < image.Height; y++)
            {
                for (int x = 0; x < image.Width; x++)
                {
                    var pixel = image.ImgArray[y, x];
                    byte v1 = c1Func(pixel);
                    byte v2 = c2Func(pixel);
                    hist[v1, v2]++;
                }
            }

            // Преобразуем гистограмму в комплексную матрицу
            var fftInput = new Complex[BinSize, BinSize];
            Parallel.For(0, BinSize, y =>
            {
                for (int x = 0; x < BinSize; x++)
                    fftInput[y, x] = new Complex((float)hist[y, x], 0);
            });

            // Прямое 2D FFT
            FourierTransform.FFT2(fftInput, FourierTransform.Direction.Forward);

            // Расчёт центра масс по модулю спектра
            double totalMagnitude = 0;
            double sumX = 0, sumY = 0;
            object lockObj = new object();

            for (int y = 0; y < BinSize / 2; y++) // Первая половина по каждой оси
            {
                for (int x = 0; x < BinSize / 2; x++)
                {
                    double mag = fftInput[y, x].Magnitude;
                    totalMagnitude += mag;
                    sumX += x * mag;
                    sumY += y * mag;
                }
            }

            comList[i * 2] = sumX / totalMagnitude;
            comList[i * 2 + 1] = sumY / totalMagnitude;
        });

        return comList;
    }

    private bool IsSuspiciousHeuristically(double[] com, double[][] cleanTrainingSet)
    {
        int dims = com.Length;
        double[] min = new double[dims];
        double[] max = new double[dims];
        double[] avg = new double[dims];

        // Вычисляем среднее по каждому измерению
        for (int i = 0; i < dims; i++)
        {
            double sum = 0;
            foreach (var vec in cleanTrainingSet)
                sum += vec[i];
            avg[i] = sum / cleanTrainingSet.Length;
        }

        // Устанавливаем пороговой диапазон ±threshold
        for (int i = 0; i < dims; i++)
        {
            min[i] = avg[i] - Params.Threshold;  // 5
            max[i] = avg[i] + Params.Threshold;  // 5
        }

        // Проверка на выход за допустимый диапазон
        for (int i = 0; i < dims; i++)
        {
            if (com[i] < min[i] || com[i] > max[i])
                return true; // Подозрительно
        }

        return false; // В пределах допустимого
    }

    private double ComputeMahalanobisDistance(double[] vector, double[][] trainingSet)
    {
        var matrix = Matrix<double>.Build;
        var vec = MathNet.Numerics.LinearAlgebra.Vector<double>.Build;

        var X = matrix.DenseOfRowArrays(trainingSet);
        var mean = vec.DenseOfEnumerable(X.ColumnSums() / X.RowCount);
        var cov = CovarianceMatrix(X);
        var diff = vec.DenseOfArray(vector) - mean;
        var invCov = cov.Inverse();

        return Math.Sqrt(diff * invCov * diff);
    }

    private Matrix<double> CovarianceMatrix(Matrix<double> data)
    {
        int n = data.RowCount;
        var mean = data.ColumnSums() / n;
        var meanMatrix = Matrix<double>.Build.Dense(n, data.ColumnCount, (i, j) => mean[j]);

        var centered = data - meanMatrix;
        return (centered.TransposeThisAndMultiply(centered)) / (n - 1);
    }
}
