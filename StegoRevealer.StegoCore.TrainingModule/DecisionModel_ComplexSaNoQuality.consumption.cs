// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace StegoRevealer_StegoCore_TrainingModule
{
    public partial class DecisionModel_ComplexSaNoQuality
    {
        /// <summary>
        /// model input class for DecisionModel_ComplexSaNoQuality.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"ChiSqrHorizontalRelativeVolume")]
            public float ChiSqrHorizontalRelativeVolume { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"ChiSqrVerticalRelativeVolume")]
            public float ChiSqrVerticalRelativeVolume { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"RsRelativeVolume")]
            public float RsRelativeVolume { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"KzhaHorizontalThreshold")]
            public float KzhaHorizontalThreshold { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"KzhaHorizontalBitsVolume")]
            public float KzhaHorizontalBitsVolume { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"KzhaVerticalThreshold")]
            public float KzhaVerticalThreshold { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"KzhaVerticalBitsVolume")]
            public float KzhaVerticalBitsVolume { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"PixelsNum")]
            public float PixelsNum { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"IsDataHided")]
            public bool IsDataHided { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for DecisionModel_ComplexSaNoQuality.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"ChiSqrHorizontalRelativeVolume")]
            public float ChiSqrHorizontalRelativeVolume { get; set; }

            [ColumnName(@"ChiSqrVerticalRelativeVolume")]
            public float ChiSqrVerticalRelativeVolume { get; set; }

            [ColumnName(@"RsRelativeVolume")]
            public float RsRelativeVolume { get; set; }

            [ColumnName(@"KzhaHorizontalThreshold")]
            public float KzhaHorizontalThreshold { get; set; }

            [ColumnName(@"KzhaHorizontalBitsVolume")]
            public float KzhaHorizontalBitsVolume { get; set; }

            [ColumnName(@"KzhaVerticalThreshold")]
            public float KzhaVerticalThreshold { get; set; }

            [ColumnName(@"KzhaVerticalBitsVolume")]
            public float KzhaVerticalBitsVolume { get; set; }

            [ColumnName(@"PixelsNum")]
            public float PixelsNum { get; set; }

            [ColumnName(@"IsDataHided")]
            public bool IsDataHided { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; } = null!;

            [ColumnName(@"PredictedLabel")]
            public bool PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

            [ColumnName(@"Probability")]
            public float Probability { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("DecisionModel_ComplexSaNoQuality.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
